Query {
  _mongooseOptions: {},
  _transforms: [],
  _hooks: Kareem { _pres: Map {}, _posts: Map {} },
  _executionCount: 0,
  mongooseCollection: NativeCollection {
    collection: Collection { s: [Object] },
    Promise: [Function: Promise],
    _closed: false,
    opts: {
      schemaUserProvidedOptions: {},
      capped: false,
      autoCreate: undefined,
      Promise: [Function: Promise],
      '$wasForceClosed': undefined
    },
    name: 'rooms',
    collectionName: 'rooms',
    conn: NativeConnection {
      base: [Mongoose],
      collections: [Object],
      models: [Object],
      config: [Object],
      replica: false,
      options: null,
      otherDbs: [],
      relatedDbs: {},
      states: [Object: null prototype],
      _readyState: 1,
      _closeCalled: false,
      _hasOpened: true,
      plugins: [],
      id: 0,
      _listening: false,
      _connectionString: 'mongodb://localhost:27017/local',
      _connectionOptions: [Object],
      name: 'local',
      host: 'localhost',
      port: 27017,
      user: undefined,
      pass: undefined,
      client: [MongoClient],
      '$initialConnection': [Promise],
      _events: [Object: null prototype],
      _eventsCount: 3,
      db: [Db]
    },
    queue: [],
    buffer: false,
    emitter: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    }
  },
  model: [Function: model] {
    hooks: Kareem { _pres: [Map], _posts: [Map] },
    base: Mongoose {
      connections: [Array],
      models: [Object],
      modelSchemas: [Object],
      options: [Object],
      _pluralize: [Function: pluralize],
      Schema: [Function],
      model: [Function],
      plugins: [Array]
    },
    modelName: 'rooms',
    model: [Function: model],
    db: NativeConnection {
      base: [Mongoose],
      collections: [Object],
      models: [Object],
      config: [Object],
      replica: false,
      options: null,
      otherDbs: [],
      relatedDbs: {},
      states: [Object: null prototype],
      _readyState: 1,
      _closeCalled: false,
      _hasOpened: true,
      plugins: [],
      id: 0,
      _listening: false,
      _connectionString: 'mongodb://localhost:27017/local',
      _connectionOptions: [Object],
      name: 'local',
      host: 'localhost',
      port: 27017,
      user: undefined,
      pass: undefined,
      client: [MongoClient],
      '$initialConnection': [Promise],
      _events: [Object: null prototype],
      _eventsCount: 3,
      db: [Db]
    },
    discriminators: undefined,
    events: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    },
    '$appliedMethods': true,
    roomslist: [Function: roomslist],
    getrooms: [Function: getrooms],
    loadroom: [Function: loadroom],
    userauth: [Function: userauth],
    roomauth: [Function: roomauth],
    userspull: [Function: userspull],
    userspush: [Function: userspush],
    addchats: [Function: addchats],
    '$appliedHooks': true,
    _middleware: Kareem { _pres: [Map], _posts: [Map] },
    '$__insertMany': [Function],
    schema: Schema {
      obj: [Object],
      paths: [Object],
      aliases: {},
      subpaths: [Object],
      virtuals: [Object],
      singleNestedPaths: {},
      nested: {},
      inherits: {},
      callQueue: [],
      _indexes: [],
      methods: [Object],
      methodOptions: {},
      statics: [Object],
      tree: [Object],
      query: {},
      childSchemas: [Array],
      plugins: [Array],
      '$id': 7,
      s: [Object],
      _userProvidedOptions: {},
      options: [Object],
      '$globalPluginsApplied': true,
      _requiredpaths: [Array]
    },
    collection: NativeCollection {
      collection: [Collection],
      Promise: [Function: Promise],
      _closed: false,
      opts: [Object],
      name: 'rooms',
      collectionName: 'rooms',
      conn: [NativeConnection],
      queue: [],
      buffer: false,
      emitter: [EventEmitter]
    },
    Query: [Function] { base: [Query] },
    '$init': Promise { [Circular] },
    '$caught': true,
    [Symbol(mongoose#Model)]: true
  },
  schema: Schema {
    obj: {
      name: [Object],
      owner: [Object],
      users: [Array],
      chats: [Array],
      created_at: [Object],
      updated_at: [Object]
    },
    paths: {
      name: [SchemaString],
      owner: [ObjectId],
      users: [DocumentArrayPath],
      chats: [DocumentArrayPath],
      created_at: [SchemaDate],
      updated_at: [SchemaDate],
      _id: [ObjectId],
      __v: [SchemaNumber]
    },
    aliases: {},
    subpaths: {
      'users.users_id': [ObjectId],
      'users.created_at': [SchemaDate],
      'users._id': [ObjectId],
      'chats.writer_id': [ObjectId],
      'chats.content': [SchemaString],
      'chats.created_at': [SchemaDate],
      'chats._id': [ObjectId]
    },
    virtuals: { id: [VirtualType] },
    singleNestedPaths: {},
    nested: {},
    inherits: {},
    callQueue: [],
    _indexes: [],
    methods: {
      saveRoom: [Function: saveRoom],
      addChats: [Function: addChats],
      removeComment: [Function: removeComment]
    },
    methodOptions: {},
    statics: {
      roomslist: [Function: roomslist],
      getrooms: [Function: getrooms],
      loadroom: [Function: loadroom],
      userauth: [Function: userauth],
      roomauth: [Function: roomauth],
      userspull: [Function: userspull],
      userspush: [Function: userspush],
      addchats: [Function: addchats]
    },
    tree: {
      name: [Object],
      owner: [Object],
      users: [Array],
      chats: [Array],
      created_at: [Object],
      updated_at: [Object],
      _id: [Object],
      __v: [Function: Number],
      id: [VirtualType]
    },
    query: {},
    childSchemas: [ [Object], [Object] ],
    plugins: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
    '$id': 7,
    s: { hooks: [Kareem] },
    _userProvidedOptions: {},
    options: {
      typePojoToMixed: true,
      typeKey: 'type',
      id: true,
      noVirtualId: false,
      _id: true,
      noId: false,
      validateBeforeSave: true,
      read: null,
      shardKey: null,
      autoIndex: null,
      minimize: true,
      discriminatorKey: '__t',
      optimisticConcurrency: false,
      versionKey: '__v',
      capped: false,
      bufferCommands: true,
      strictQuery: false,
      strict: true,
      pluralization: true
    },
    '$globalPluginsApplied': true,
    _requiredpaths: [ 'owner', 'name' ]
  },
  op: 'findOneAndUpdate',
  options: { new: true, upsert: true, rawResult: true },
  _conditions: { _id: '5ffe6c53d8deae2419658456' },
  _fields: undefined,
  _update: { '$push': { chats: [Object] }, '$setOnInsert': { __v: 0 } },
  _path: undefined,
  _distinct: undefined,
  _collection: NodeCollection {
    collection: NativeCollection {
      collection: [Collection],
      Promise: [Function: Promise],
      _closed: false,
      opts: [Object],
      name: 'rooms',
      collectionName: 'rooms',
      conn: [NativeConnection],
      queue: [],
      buffer: false,
      emitter: [EventEmitter]
    },
    collectionName: 'rooms'
  },
  _traceFunction: undefined,
  '$useProjection': true
}