<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1">

    <title>채팅방 리스트</title>

    <link href="/public/semantic.min.css" rel="stylesheet">

    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        html {
            width: 100%;
            height: 100%;
        }

        body {
            width: 100%;
            height: 100%;
            color: #000;
            background-color: #fff;
        }

        .container {
            margin-right: auto;
            margin-left: auto;
            padding-left: 20px;
            padding-right: 20px;
        }

        span {
            color: #333;
        }

        #board_title {
            font-size: 1.2em;
            font-weight: bold;
            color: teal;
        }

    </style>


    <script src="/public/jquery-3.5.1.min.js"></script>
    <script src="/public/semantic.min.js"></script>
    <script src="/public/socket.io.js"></script>

    <script>
        var host;
        var port;
        var join_room = {
            join : room,
            user_id : user.user_id,
            user_pw : user.user_pw,
        }
        var socket;

        // 문서 로딩 후 실행됨
        $().ready(function() {
            // 새 창 띄우고 바로 연결시도


            // 연결하기 버튼 클릭 처리 --> 수정(연결 시, 그 특정 방에 join 하게)
            $("#connectButton").bind('click', function(event) {
                println('connectButton이 클릭되었습니다.');

                host = $('#hostInput').val();
                port = $('#portInput').val();

                connectToServer();
            });

            // 전송 버튼 클릭 시 처리
            $("#sendButton").bind('click', function(event) {

                // chattype 구분
                var chattype = $('#chattype option:selected').val();

                var sender = $('#senderInput').val();
                var recepient = $('#recepientInput').val();
                var data = $('#dataInput').val();

                var output = {sender:sender, recepient:recepient, command:chattype, type:'text', data:data};
                console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

                if (socket == undefined) {
                    alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
                    return;
                }

                socket.emit('message', output);
            });

            // 로그인 버튼 클릭 시 처리
            $("#loginButton").bind('click', function(event) {
                var id = $('#idInput').val();
                var password = $('#passwordInput').val();
                var alias = $('#aliasInput').val();
                var today = $('#todayInput').val();

                var output = {id:id, password:password, alias:alias, today:today};
                console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

                if (socket == undefined) {
                    alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
                    return;
                }

                socket.emit('login', output);
            });

            // 방만들기 버튼 클릭 시 처리
            $("#createRoomButton").bind('click', function(event) {
                var roomId = $('#roomIdInput').val();
                var roomName = $('#roomNameInput').val();
                var id = $('#idInput').val();

                var output = {command:'create', roomId:roomId, roomName:roomName, roomOwner:id};
                console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

                if (socket == undefined) {
                    alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
                    return;
                }

                socket.emit('room', output);
            });

            // 방이름바꾸기 버튼 클릭 시 처리
            $("#updateRoomButton").bind('click', function(event) {
                var roomId = $('#roomIdInput').val();
                var roomName = $('#roomNameInput').val();
                var id = $('#idInput').val();

                var output = {command:'update', roomId:roomId, roomName:roomName, roomOwner:id};
                console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

                if (socket == undefined) {
                    alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
                    return;
                }

                socket.emit('room', output);
            });

            // 방없애기 버튼 클릭 시 처리
            $("#deleteRoomButton").bind('click', function(event) {
                var roomId = $('#roomIdInput').val();

                var output = {command:'delete', roomId:roomId};
                console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

                if (socket == undefined) {
                    alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
                    return;
                }

                socket.emit('room', output);
            });

            // 방입장하기 버튼 클릭 시 처리
            $("#joinRoomButton").bind('click', function(event) {
                var roomId = $('#roomIdInput').val();

                var output = {command:'join', roomId:roomId};
                console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

                if (socket == undefined) {
                    alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
                    return;
                }

                socket.emit('room', output);
            });

            // 방나가기 버튼 클릭 시 처리
            $("#leaveRoomButton").bind('click', function(event) {
                var roomId = $('#roomIdInput').val();

                var output = {command:'leave', roomId:roomId};
                console.log('서버로 보낼 데이터 : ' + JSON.stringify(output));

                if (socket == undefined) {
                    alert('서버에 연결되어 있지 않습니다. 먼저 서버에 연결하세요.');
                    return;
                }

                socket.emit('room', output);
            });

        });

        // 서버에 연결하는 함수 정의
        function connectToServer() {

            var options = {'forceNew':true};
            var url = 'http://' + host + ':' + port;
            socket = io.connect(url, options);

            socket.on('connect', function() {
                println('웹소켓 서버에 연결되었습니다. : ' + url);

                // 연결 되면, 선택한 방에 join 하도록
                socket.emit('joinRoom', join_room);

                socket.on('preLoad', function(preload) {
                    console.log(JSON.stringify(preload));
                    var chats = preload.chats;
                    // 반복문 통해서, 메시지들 표시 해주기.
                    chats.forEach(function(chat) {
                        println('이전 메시지 : ' + chat.writer + ', ' + chat.content );
                    });

                });

                socket.on('message', function(message) {
                    console.log(JSON.stringify(message));

                    println('<p>수신 메시지 : ' + message.sender + ', ' + message.recepient + ', ' + message.command + ', ' + message.data + '</p>');
                });

                socket.on('response', function(response) {
                    console.log(JSON.stringify(response));
                    println('응답 메시지를 받았습니다. : ' + response.command + ', ' + response.code + ', ' + response.message);
                });

                // 그룹 채팅에서 방과 관련된 이벤트 처리
                socket.on('room', function(data) {
                    console.log(JSON.stringify(data));

                    println('<p>방 이벤트 : ' + data.command + '</p>');
                    println('<p>방 리스트를 받았습니다.</p>');
                    if (data.command == 'list') { // 방 리스트
                        var roomCount = data.rooms.length;
                        $("#roomList").html('<p>방 리스트 ' + roomCount + '개</p>');
                        for (var i = 0; i < roomCount; i++) {
                            $("#roomList").append('<p>방 #' + i + ' : ' + data.rooms[i].id + ', ' + data.rooms[i].name + ', ' + data.rooms[i].owner + '</p>');
                        }
                    }
                });

            });

            socket.on('disconnect', function() {
                println('웹소켓 연결이 종료되었습니다.');
            });

        }

        function println(data) {
            console.log(data);
            $('#result').append('<p>' + data + '</p>');
        }
        function listroom(page, perPage) {
            document.location = '/process/listroom?page=' + page + '&perPage=' + perPage;
        }

    </script>

</head>

<body>

    <div class="container">
        <br>

        <div class="ui raised segment">
            <a class="ui blue ribbon label">채팅 목록</a>
            <span id="board_title"><%=title %></span>


            <div class="ui blue fluid card">
                <div class="content">


                    <div class="ui four grid">
                        <div class="column">방 이름</div>
                        <div class="column">방장</div>
                        <div class="column">참가자</div>
                        <div class="column">생성 일자</div>
                        
                    </div>

                    <div class="ui very relaxed selection celled list">
                        <%  /*var noStart = (pageCount - page) * perPage;*/
                            var noStart = (pageCount - page) * perPage;
							 
							    for (var i = 0; i < rooms.length; i++) {
								    var roomName = rooms[i]._doc.name;
								    var roomOwner = rooms[i]._doc.owner;
								    
                                    
                                    
								    var curNo = noStart - i - 1;
								   %>
                        <div class="item">
                            <div class="ui relaxed grid">
                                
                                <div class="sixteen wide column" onclick="javascript:window.open('/process/showchats/<%=rooms[i]._id %>')">
                                    
                                    <div class="column">
                                        <div class="ui four grid">
                                            <div class="column"><%=roomName %></div>
                                            <div class="column"><%=roomOwner %></div>
                                            
                                            
                                            
                                        </div>
                                      </div>
                                    
                                </div>
                                
                            </div>
                        </div>
                        <% } %>

                    </div>

                    <br>
                    <div class="tiny ui basic buttons">
                        <%
					 			if (page > 0) {
					 		%>
                        <div class="ui icon button" onclick="listroom(0, <%=perPage %>)">
                            <i class="backward icon"></i>
                        </div>
                        <div class="ui icon button" onclick="listroom(<%=(page-1) %>, <%=perPage %>)">
                            <i class="chevron left icon"></i>
                        </div>
                        <%
					 			} else {
					 		%>
                        <div class="ui disabled icon button">
                            <i class="backward icon"></i>
                        </div>
                        <div class="ui disabled icon button">
                            <i class="chevron left icon"></i>
                        </div>
                        <%
					 			}
					 		%>
                        <% 
					 			var initial = Math.floor(page / 10) * 10;
					 			console.log('initial : ' + initial);
					 			
					 			var max = pageCount - initial;
					 			if (max > 10) {
					 				max = initial + 10;
					 			} else {
					 				max = initial + max;
					 			}
					 			console.log('max : ' + max);
					 			
					 			for (var i = initial; i < max; i++) {
					 				if (i != page) {
					 		%>
                        <div class="ui button" onclick="listroom(<%=i %>, <%=perPage %>)">
                            <%= i %>
                        </div>
                        <%
					 				} else {
					 		%>
                        <div class="ui active basic button">
                            <%= i %>
                        </div>
                        <% 
					 				}
					 			}
					 		%>
                        <%
					 			if ((page+1) < pageCount) {
					 		%>
                        <div class="ui icon button" onclick="listroom(<%=(page+1) %>, <%=perPage %>)">
                            <i class="right chevron icon"></i>
                        </div>
                        <div class="ui icon button" onclick="listroom(<%=(pageCount-1) %>, <%=perPage %>)">
                            <i class="forward icon"></i>
                        </div>
                        <%
					 			} else {
					 		%>
                        <div class="ui disabled icon button">
                            <i class="right chevron icon"></i>
                        </div>
                        <div class="ui disabled icon button">
                            <i class="forward icon"></i>
                        </div>
                        <%
					 			}
					 		%>
                    </div>

                    <br><br>
                    <a class="ui button" href='/process/listroom?page=0&perPage=2'>새로고침</a>
                    <a class="ui button" >새로운 채팅방 만들기</a>
                    
                    
                    <div>
                        <input type="text" id="hostInput" value="localhost" />
                        <input type="text" id="portInput" value="3701" />

                        <input type="button" id="connectButton" value="연결하기" />
                    </div>
                    <hr/>
                    <p>결과 : </p>
                    <div id="result"></div>
                </div>
            </div>
        </div>
    </div>

</body>

</html>
